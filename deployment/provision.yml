---
- hosts: servers
  vars_files:
    - vars.yml
  gather_facts: false
  remote_user: root

  tasks:
    - name: Add PyPy PPA
      apt_repository: repo=ppa:pypy/ppa
    
    - name: Add Certbot PPA
      apt_repository: repo=ppa:certbot/certbot

    - name: upgrade APT to the latest packages
      apt: upgrade=safe update-cache=yes

    - name: Install system packages
      apt: pkg={{ item }} update-cache=yes state=present
      with_items: "{{ system_packages }}"

    - name: Create deploy user
      user: name=deploy shell=/bin/bash append=yes groups=sudo generate_ssh_key=true
    
    - name: Allow deploy to restart services
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^deploy ALL=(ALL) NOPASSWD:'
        line: 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl'
        validate: 'visudo -cf %s'
    
    - name: Authorize deploy user with public key
      authorized_key:
        user: deploy
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: Create directory for app
      file: path={{ install_path }}/{{ project_name }}/app
            state=directory
            owner=deploy
            group=deploy
    - name: Create directory for virtualenv
      file: path={{ install_path }}/{{ project_name }}/env
            state=directory
            owner=deploy
            group=deploy
    - name: Create directory for logs
      file: path={{ install_path }}/{{ project_name }}/logs
            state=directory
            owner=deploy
            group=deploy
    
    - name: Ensure the Redis service is running
      service: name=redis-server state=started enabled=yes

    - name: Ensure the PostgreSQL service is running
      service: name=postgresql state=started enabled=yes

    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db: name={{ db_name }} state=present
    
    - name: Ensure user has access to the database
      become: yes
      become_user: postgres
      postgresql_user: db={{ db_name }}
                       name={{ db_user }}
                       password={{ db_password }}
                       encrypted=yes
                       priv=ALL
                       state=present
  
    - name: Ensure user does not have unnecessary privileges
      become: yes
      become_user: postgres
      postgresql_user: name={{ db_user }}
                       role_attr_flags=NOSUPERUSER,NOCREATEDB
                       state=present

    - name: Remove default nginx site
      file: path=/etc/nginx/sites-enabled/default state=absent

    - name: Copy nginx config
      template:
        src: templates/nginx.j2
        dest: "/etc/nginx/sites-available/{{ project_name }}.conf"
    
    - name: Enable site
      file:
        src: "/etc/nginx/sites-available/{{ project_name }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ project_name }}.conf"
        state: link

    - name: Secure site
      command: "certbot --nginx certonly --non-interactive --agree-tos --email {{ certbot_email }} -d {{ domains|join(' -d ') }}"

    - name: Copy gunicorn config
      template:
        src: templates/gunicorn.j2
        dest: "/etc/systemd/system/gunicorn.service"

    - name: Copy huey config
      template:
        src: templates/huey.j2
        dest: "/etc/systemd/system/huey.service"

- import_playbook: deploy.yml
